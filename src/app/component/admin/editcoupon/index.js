"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from 'next/navigation';
import { Box, Container, TextField, Button, Grid, Typography, Card, CardMedia, CardContent, FormControl, InputLabel, MenuItem, Select , Autocomplete } from "@mui/material";
import Header from "../../header2";
import Coupon from '../../../../services/api/coupon';
import Store from '../../../../services/api/store';


export default function CouponForm() {
    const router = useRouter();
    const { coupon_id } = useParams();
    const idAsInt = Number(coupon_id);

    console.log("idAsInt",idAsInt);

    const [formData, setFormData] = useState({
        name_coupon: "",
        start_Date: "",
        end_Date: "",
        type: "",
        number_of_coupons: 0,
        details: ""
    });


    const [image, setImage] = useState(null);
    const [previewImage, setPreviewImage] = useState(null);
     const [dataStore, setDataStore] = useState();

    useEffect(() => {

        async function getDataById() {
            try {       
              const getdataById = await Coupon.getByCoupon(idAsInt);
              setFormData(getdataById.body)
            } catch (error) {
              console.error('Error fetching data:', error);
            }
          }
          getDataById();

          async function getStore() {
            try {
                const stores = await Store.getAll();
                setDataStore(stores.body)
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
        getStore();
    

        }, [coupon_id]);

        
      


    //‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°
    const handleChange = (e) => {
        const { name, value } = e.target;

        if (name === "store_id") {
            setFormData({
                ...formData,
                [name]: value ? Number(value) : null,
            });
        }
        else if (name === "number_of_coupons") {
            setFormData({
                ...formData,
                [name]: value ? Number(value) : null,
            });
        }
        else if (name === 'start_Date' || name === 'end_Date') {
            const selectedDate = new Date(value);
            const currentDate = new Date();
            selectedDate.setHours(currentDate.getHours(), currentDate.getMinutes(), 0, 0);

            setFormData({
                ...formData,
                [name]: selectedDate.toISOString(),
            });
        } else {
            setFormData({
                ...formData,
                [name]: value,
            });
        }

        console.log("from now ", formData);
    };



    //‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            setImage(file);
            setPreviewImage(URL.createObjectURL(file));
        }
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
                await Coupon.update(idAsInt ,formData);
                router.push("/admin/home"); 
        } catch (error) {
            console.error("Error submitting data:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        }
    };

    //console.log(Date)

    return (
        <div>
            <Header />
            <Box sx={{ display: "flex", justifyContent: "center", mt: 16 }}>
                <Container maxWidth="md">
                    <Card sx={{ p: 3, backgroundColor: "#ffffff", boxShadow: 3 }}>
                        <CardContent>
                            {/* üîπ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á" ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô */}
                            <Typography variant="h4" align="center" sx={{ fontWeight: "bold", mb: 2 }}>
                                ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
                            </Typography>

                            <form onSubmit={handleSubmit} encType="multipart/form-data">
                                <Grid container spacing={2} sx ={{ mt:2}}>
                                    {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏° */}
                                    <Grid item xs={12} sm={6}>
                                        <TextField 
                                        fullWidth 
                                        label="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á" 
                                        name="name_coupon" 
                                        value={formData.name_coupon} 
                                        onChange={(e) => {
                                            const { name, value } = e.target;
                                            setFormData(prevState => ({
                                                ...prevState, 
                                                [name]: value,
                                            }));
                                        }}  
                                        required />
                                    </Grid>
                                    {/* <Grid item xs={12} sm={6}>
                                        <TextField fullWidth label="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô/‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£" type="number"  name="store_id" value={formData.store_id} onChange={handleChange} required InputLabelProps={{ shrink: true }}/>
                                    </Grid> */}
                                    <Grid item xs={12} sm={6}>
                                    <Autocomplete
                                        options={dataStore || []}
                                        getOptionLabel={(option) => option.store_name || ""}
                                        isOptionEqualToValue={(option, value) => option.store_id === value?.store_id}
                                        value={dataStore?.find(store => store.store_id === formData.store_id) || null}
                                        onChange={(event, newValue) => {
                                        handleChange({
                                            target: {
                                            name: "store_id",
                                            value: newValue ? newValue.store_id : "", // ‡πÉ‡∏ä‡πâ "" ‡πÅ‡∏ó‡∏ô null
                                            },
                                        });
                                        }}
                                        renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
                                            required
                                            disabled={!dataStore}
                                            value={formData.store_id || ""} // ‡πÅ‡∏Å‡πâ null ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ""
                                        />
                                        )}
                                    />
                                    </Grid>

                                    {/* <Grid item xs={12} sm={6}>
                                        <TextField fullWidth label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" name="location" value={formData.location} onChange={handleChange} required />
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <TextField fullWidth label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" name="address" value={formData.address} onChange={handleChange} required />
                                    </Grid> */}
                                    <Grid item xs={12} sm={6}>
                                        <TextField 
                                        fullWidth 
                                        type="date" 
                                        label="‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á (‡∏à‡∏≤‡∏Å)" 
                                        name="start_Date" 
                                        value={formData.start_Date ? formData.start_Date.split("T")[0] : ""} 
                                        onChange={handleChange} 
                                            InputLabelProps={{ shrink: true }} />
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <TextField 
                                        fullWidth 
                                        type="date" 
                                        label="‡∏ñ‡∏∂‡∏á" 
                                        name="end_Date" 
                                        value={formData.end_Date ? formData.end_Date.split("T")[0] : ""} 
                                        onChange={handleChange} 
                                        InputLabelProps={{ shrink: true }} />
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <TextField 
                                        fullWidth 
                                        label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á" 
                                        name="type" 
                                        value={formData.type} 
                                        onChange={(e) => {
                                            const { name, value } = e.target;
                                            setFormData(prevState => ({
                                                ...prevState, 
                                                [name]: value,
                                            }));
                                        }}  
                                        required />
                                    </Grid>

                                    <Grid item xs={12} sm={6}>
                                        <TextField 
                                        fullWidth 
                                        label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á" 
                                        type="number" 
                                        name="number_of_coupons" 
                                        value={formData.number_of_coupons || ""} 
                                        onChange={handleChange}  
                                        required 
                                        InputProps={{ inputProps: { min: 1 } }} />
                                    </Grid>
                                    <Grid item xs={12}>
                                        <TextField 
                                        fullWidth 
                                        label="‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" 
                                        name="details" 
                                        value={formData.details} 
                                        onChange={(e) => {
                                            const { name, value } = e.target;
                                            setFormData(prevState => ({
                                                ...prevState, 
                                                [name]: value,
                                            }));
                                        }}  
                                        multiline rows={4} />
                                    </Grid>
                                    {/* ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
                                    <Grid item xs={12}>
                                        <Typography variant="subtitle1">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û(‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) :</Typography>
                                        <input type="file" accept="image/*" onChange={handleImageChange} />
                                    </Grid>
                                    {/* üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î */}
                                    {previewImage && (
                                        <CardMedia
                                            component="img"
                                            image={previewImage}
                                            alt="Coupon Preview"
                                            sx={{
                                                maxWidth: "200px",  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 
                                                height: "120",  // ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
                                                borderRadius: 2,
                                                objectFit: "contain",
                                                display: "block",
                                                margin: "0 auto", // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
                                                mb: 2,
                                                mt: 2
                                            }}
                                        />
                                    )}

                                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
                                    <Grid item xs={12} sx={{ textAlign: "right", mt: 2 }}>
                                        <Button type="submit" variant="contained" color="success" size="large">
                                            ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
                                        </Button>
                                    </Grid>
                                </Grid>
                            </form>
                        </CardContent>
                    </Card>
                </Container>
            </Box>
        </div>
    );
}
